//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26907403
// Cuda compilation tools, release 10.1, V10.1.243
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_70
.address_size 64

	// .globl	init_program
.extern .func  (.param .b32 func_retval0) _initialize
(
	.param .b64 _initialize_param_0,
	.param .b64 _initialize_param_1
)
;
.extern .func  (.param .b32 func_retval0) _make_work
(
	.param .b64 _make_work_param_0,
	.param .b64 _make_work_param_1
)
;
.extern .func  (.param .b32 func_retval0) _odd
(
	.param .b64 _odd_param_0,
	.param .b64 _odd_param_1,
	.param .b64 _odd_param_2
)
;
.extern .func  (.param .b32 func_retval0) _even
(
	.param .b64 _even_param_0,
	.param .b64 _even_param_1,
	.param .b64 _even_param_2
)
;
.extern .func  (.param .b32 func_retval0) _finalize
(
	.param .b64 _finalize_param_0,
	.param .b64 _finalize_param_1
)
;
.weak .shared .align 1 .b8 _ZZ15_inner_dev_initI12EventProgramI6collazEEvRNT_13DeviceContextERNS3_11DeviceStateEE8_grp_ctx[1];
.weak .shared .align 8 .u64 _ZZ15_inner_dev_initI12EventProgramI6collazEEvRNT_13DeviceContextERNS3_11DeviceStateEE5group;
.weak .shared .align 8 .b8 _ZZN12EventProgramI6collazE4execEjE10group_work[16];
.weak .shared .align 1 .u8 _ZZN12EventProgramI6collazE4execEjE4done;
.weak .shared .align 4 .u32 _ZZN12EventProgramI6collazE4execEjE7func_id;
.weak .shared .align 1 .u8 _ZZN12EventProgramI6collazE4execEjE16should_make_work;
.weak .shared .align 1 .b8 _ZZ15_inner_dev_execI12EventProgramI6collazEEvRNT_13DeviceContextERNS3_11DeviceStateEmE8_grp_ctx[1];
.weak .shared .align 8 .u64 _ZZ15_inner_dev_execI12EventProgramI6collazEEvRNT_13DeviceContextERNS3_11DeviceStateEmE5group;

.visible .func  (.param .b32 func_retval0) init_program(
	.param .b64 init_program_param_0,
	.param .b64 init_program_param_1,
	.param .b64 init_program_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	exec_program
.visible .func  (.param .b32 func_retval0) exec_program(
	.param .b64 exec_program_param_0,
	.param .b64 exec_program_param_1,
	.param .b64 exec_program_param_2,
	.param .b64 exec_program_param_3
)
{
	.local .align 8 .b8 	__local_depot1[352];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<30>;
	.reg .b16 	%rs<19>;
	.reg .b32 	%r<125>;
	.reg .b64 	%rd<123>;


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd35, [exec_program_param_1];
	ld.param.u64 	%rd37, [exec_program_param_2];
	ld.param.u64 	%rd36, [exec_program_param_3];
	add.u64 	%rd38, %SP, 0;
	add.u64 	%rd39, %SPL, 0;
	add.u64 	%rd40, %SP, 48;
	add.u64 	%rd41, %SPL, 48;
	add.u64 	%rd42, %SP, 324;
	add.u64 	%rd43, %SPL, 324;
	add.u64 	%rd44, %SP, 336;
	add.u64 	%rd45, %SPL, 336;
	st.local.u64 	[%rd45], %rd37;
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r25, %ctaid.x;
	mov.u32 	%r2, %tid.x;
	mad.lo.s32 	%r26, %r1, %r25, %r2;
	st.local.u32 	[%rd43], %r26;
	st.local.u32 	[%rd43+4], %r26;
	st.local.u64 	[%rd39], %rd35;
	mov.u32 	%r27, _ZZ15_inner_dev_execI12EventProgramI6collazEEvRNT_13DeviceContextERNS3_11DeviceStateEmE8_grp_ctx;
	{
	.reg .u64 %temp; 
	cvt.u64.u32 	%temp, %r27;
	cvta.shared.u64 	%rd46, %temp;
	}
	st.local.u64 	[%rd39+8], %rd46;
	st.local.u64 	[%rd39+16], %rd42;
	st.local.u64 	[%rd39+24], %rd44;
	mov.u32 	%r28, _ZZ15_inner_dev_execI12EventProgramI6collazEEvRNT_13DeviceContextERNS3_11DeviceStateEmE5group;
	{
	.reg .u64 %temp; 
	cvt.u64.u32 	%temp, %r28;
	cvta.shared.u64 	%rd47, %temp;
	}
	st.local.u64 	[%rd39+32], %rd47;
	add.u64 	%rd48, %SP, 344;
	st.local.u64 	[%rd39+40], %rd48;
	mov.u32 	%r117, 0;
	st.local.u32 	[%rd41], %r117;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd40;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd38;
	.param .b32 retval0;
	call.uni (retval0), 
	_initialize, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r30, [retval0+0];
	
	//{
	}// Callseq End 0
	bar.sync 	0;
	// inline asm
	activemask.b32 %r31;
	// inline asm
	bar.sync 	0;
	bar.sync 	0;
	// inline asm
	activemask.b32 %r32;
	// inline asm
	neg.s32 	%r33, %r32;
	and.b32  	%r34, %r32, %r33;
	clz.b32 	%r35, %r34;
	mov.u32 	%r36, 31;
	sub.s32 	%r37, %r36, %r35;
	setp.ne.s32	%p2, %r37, %r2;
	@%p2 bra 	BB1_2;

	mov.u64 	%rd49, 0;
	st.shared.u64 	[_ZZN12EventProgramI6collazE4execEjE10group_work], %rd49;
	mov.u32 	%r38, 0;
	st.shared.v2.u32 	[_ZZN12EventProgramI6collazE4execEjE10group_work+8], {%r38, %r38};

BB1_2:
	cvt.u32.u64	%r3, %rd36;
	bar.sync 	0;
	shl.b32 	%r4, %r3, 5;
	mul.lo.s32 	%r5, %r1, %r3;
	add.u64 	%rd51, %SP, 320;
	add.u64 	%rd1, %SPL, 320;
	add.u64 	%rd52, %SP, 296;
	add.u64 	%rd2, %SPL, 296;
	add.u64 	%rd53, %SP, 248;
	add.u64 	%rd3, %SPL, 248;
	add.u64 	%rd54, %SP, 240;
	add.u64 	%rd4, %SPL, 240;
	add.u64 	%rd55, %SP, 216;
	add.u64 	%rd5, %SPL, 216;
	add.u64 	%rd56, %SP, 168;
	add.u64 	%rd6, %SPL, 168;

BB1_3:
	bar.sync 	0;
	// inline asm
	activemask.b32 %r41;
	// inline asm
	neg.s32 	%r42, %r41;
	and.b32  	%r43, %r41, %r42;
	clz.b32 	%r44, %r43;
	sub.s32 	%r46, %r36, %r44;
	setp.ne.s32	%p3, %r46, %r2;
	@%p3 bra 	BB1_12;

	mov.u16 	%rs3, 1;
	st.shared.u8 	[_ZZN12EventProgramI6collazE4execEjE4done], %rs3;
	ld.u64 	%rd115, [%rd35+16];
	ld.u32 	%r48, [%rd115+32];
	ld.u32 	%r49, [%rd115+28];
	setp.lt.u32	%p4, %r49, %r48;
	mov.u32 	%r118, 0;
	@%p4 bra 	BB1_6;

	ld.u64 	%rd115, [%rd35+24];
	ld.u32 	%r51, [%rd115+32];
	ld.u32 	%r52, [%rd115+28];
	mov.u32 	%r118, 1;
	setp.ge.u32	%p5, %r52, %r51;
	@%p5 bra 	BB1_12;

BB1_6:
	mov.u16 	%rs4, 0;
	st.shared.u8 	[_ZZN12EventProgramI6collazE4execEjE4done], %rs4;
	st.shared.u32 	[_ZZN12EventProgramI6collazE4execEjE7func_id], %r118;
	add.s64 	%rd19, %rd115, 32;
	ld.u32 	%r53, [%rd115+28];
	ld.u32 	%r119, [%rd115+32];
	setp.gt.u32	%p6, %r53, %r119;
	mov.u32 	%r120, %r119;
	@%p6 bra 	BB1_8;

	add.s64 	%rd61, %rd19, -4;
	atom.add.u32 	%r54, [%rd61], %r4;
	add.s32 	%r55, %r54, %r4;
	ld.u32 	%r56, [%rd19];
	min.u32 	%r119, %r54, %r56;
	min.u32 	%r120, %r55, %r56;

BB1_8:
	ld.u8 	%rs5, [%rd19+-32];
	setp.eq.s16	%p7, %rs5, 0;
	@%p7 bra 	BB1_10;
	bra.uni 	BB1_9;

BB1_10:
	ld.u64 	%rd116, [%rd19+-24];
	bra.uni 	BB1_11;

BB1_9:
	ld.u64 	%rd116, [%rd19+-16];

BB1_11:
	st.shared.u64 	[_ZZN12EventProgramI6collazE4execEjE10group_work], %rd116;
	st.shared.v2.u32 	[_ZZN12EventProgramI6collazE4execEjE10group_work+8], {%r119, %r120};

BB1_12:
	bar.sync 	0;
	ld.shared.u8 	%rs6, [_ZZN12EventProgramI6collazE4execEjE4done];
	setp.eq.s16	%p8, %rs6, 0;
	@%p8 bra 	BB1_24;
	bra.uni 	BB1_13;

BB1_24:
	ld.shared.v2.u32 	{%r78, %r79}, [_ZZN12EventProgramI6collazE4execEjE10group_work+8];
	mov.u32 	%r123, 0;
	setp.ge.u32	%p16, %r78, %r79;
	mov.u32 	%r122, %r123;
	@%p16 bra 	BB1_28;

	add.s32 	%r80, %r78, %r2;
	add.s32 	%r81, %r80, %r5;
	min.u32 	%r123, %r80, %r79;
	min.u32 	%r122, %r81, %r79;
	bar.sync 	0;
	// inline asm
	activemask.b32 %r82;
	// inline asm
	neg.s32 	%r83, %r82;
	and.b32  	%r84, %r82, %r83;
	clz.b32 	%r85, %r84;
	sub.s32 	%r87, %r36, %r85;
	setp.ne.s32	%p17, %r87, %r2;
	@%p17 bra 	BB1_27;

	ld.shared.u32 	%r88, [_ZZN12EventProgramI6collazE4execEjE10group_work+8];
	add.s32 	%r89, %r88, %r5;
	st.shared.u32 	[_ZZN12EventProgramI6collazE4execEjE10group_work+8], %r89;

BB1_27:
	bar.sync 	0;

BB1_28:
	ld.shared.u64 	%rd24, [_ZZN12EventProgramI6collazE4execEjE10group_work];
	bra.uni 	BB1_29;

BB1_34:
	st.local.u64 	[%rd3], %rd35;
	st.local.u64 	[%rd3+8], %rd46;
	st.local.u64 	[%rd3+16], %rd42;
	st.local.u64 	[%rd3+24], %rd44;
	st.local.u64 	[%rd3+32], %rd47;
	st.local.u64 	[%rd3+40], %rd48;
	st.local.u64 	[%rd2], %rd119;
	st.local.u64 	[%rd2+8], %rd118;
	st.local.u64 	[%rd2+16], %rd117;
	mov.u32 	%r94, 0;
	st.local.u32 	[%rd1], %r94;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd51;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd53;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd52;
	.param .b32 retval0;
	call.uni (retval0), 
	_even, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b32	%r95, [retval0+0];
	
	//{
	}// Callseq End 2
	mov.u32 	%r123, %r22;

BB1_29:
	setp.lt.u32	%p19, %r123, %r122;
	selp.b32	%r90, %r1, 0, %p19;
	add.s32 	%r22, %r90, %r123;
	selp.b32	%r116, %r123, %r116, %p19;
	mov.pred 	%p29, -1;
	setp.ge.u32	%p20, %r123, %r122;
	@%p20 bra 	BB1_31;

	mul.wide.u32 	%rd73, %r116, 40;
	add.s64 	%rd74, %rd24, %rd73;
	ld.u64 	%rd119, [%rd74+8];
	ld.u64 	%rd118, [%rd74+16];
	ld.u64 	%rd117, [%rd74+24];
	mov.pred 	%p29, 0;

BB1_31:
	@%p29 bra 	BB1_36;

	ld.shared.u32 	%r91, [_ZZN12EventProgramI6collazE4execEjE7func_id];
	setp.eq.s32	%p22, %r91, 0;
	@%p22 bra 	BB1_35;
	bra.uni 	BB1_33;

BB1_35:
	st.local.u64 	[%rd6], %rd35;
	st.local.u64 	[%rd6+8], %rd46;
	st.local.u64 	[%rd6+16], %rd42;
	st.local.u64 	[%rd6+24], %rd44;
	st.local.u64 	[%rd6+32], %rd47;
	st.local.u64 	[%rd6+40], %rd48;
	st.local.u64 	[%rd5], %rd119;
	st.local.u64 	[%rd5+8], %rd118;
	st.local.u64 	[%rd5+16], %rd117;
	mov.u32 	%r98, 0;
	st.local.u32 	[%rd4], %r98;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd54;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd56;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd55;
	.param .b32 retval0;
	call.uni (retval0), 
	_odd, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b32	%r99, [retval0+0];
	
	//{
	}// Callseq End 3
	mov.u32 	%r123, %r22;
	bra.uni 	BB1_29;

BB1_33:
	setp.ne.s32	%p23, %r91, 1;
	mov.u32 	%r123, %r22;
	@%p23 bra 	BB1_29;
	bra.uni 	BB1_34;

BB1_36:
	setp.lt.u32	%p24, %r117, 1048575;
	add.s32 	%r117, %r117, 1;
	@%p24 bra 	BB1_3;
	bra.uni 	BB1_37;

BB1_13:
	// inline asm
	activemask.b32 %r57;
	// inline asm
	neg.s32 	%r58, %r57;
	and.b32  	%r59, %r57, %r58;
	clz.b32 	%r60, %r59;
	sub.s32 	%r62, %r36, %r60;
	setp.ne.s32	%p9, %r62, %r2;
	@%p9 bra 	BB1_15;

	mov.u16 	%rs7, 1;
	st.shared.u8 	[_ZZN12EventProgramI6collazE4execEjE16should_make_work], %rs7;

BB1_15:
	bar.sync 	0;
	ld.shared.u8 	%rs8, [_ZZN12EventProgramI6collazE4execEjE16should_make_work];
	setp.eq.s16	%p10, %rs8, 0;
	@%p10 bra 	BB1_37;

BB1_16:
	// inline asm
	activemask.b32 %r63;
	// inline asm
	neg.s32 	%r64, %r63;
	and.b32  	%r65, %r63, %r64;
	clz.b32 	%r66, %r65;
	sub.s32 	%r68, %r36, %r66;
	setp.ne.s32	%p11, %r68, %r2;
	@%p11 bra 	BB1_21;

	ld.u64 	%rd62, [%rd35+16];
	add.s64 	%rd63, %rd62, 36;
	atom.add.u32 	%r69, [%rd63], 0;
	ld.u32 	%r70, [%rd35+8];
	setp.lt.u32	%p12, %r69, %r70;
	@%p12 bra 	BB1_19;

	mov.u16 	%rs9, 0;
	st.shared.u8 	[_ZZN12EventProgramI6collazE4execEjE16should_make_work], %rs9;

BB1_19:
	ld.u64 	%rd64, [%rd35+24];
	add.s64 	%rd65, %rd64, 36;
	atom.add.u32 	%r71, [%rd65], 0;
	ld.u32 	%r72, [%rd35+8];
	setp.lt.u32	%p13, %r71, %r72;
	@%p13 bra 	BB1_21;

	mov.u16 	%rs10, 0;
	st.shared.u8 	[_ZZN12EventProgramI6collazE4execEjE16should_make_work], %rs10;

BB1_21:
	ld.shared.u8 	%rs12, [_ZZN12EventProgramI6collazE4execEjE16should_make_work];
	setp.eq.s16	%p14, %rs12, 0;
	mov.u16 	%rs18, 0;
	@%p14 bra 	BB1_23;

	add.u64 	%rd106, %SPL, 112;
	add.u64 	%rd103, %SP, 160;
	add.u64 	%rd102, %SPL, 160;
	add.u64 	%rd101, %SP, 112;
	st.local.u64 	[%rd106], %rd35;
	st.local.u64 	[%rd106+8], %rd46;
	st.local.u64 	[%rd106+16], %rd42;
	st.local.u64 	[%rd106+24], %rd44;
	st.local.u64 	[%rd106+32], %rd47;
	st.local.u64 	[%rd106+40], %rd48;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd103;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd101;
	.param .b32 retval0;
	call.uni (retval0), 
	_make_work, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r75, [retval0+0];
	
	//{
	}// Callseq End 1
	ld.local.u8 	%rs18, [%rd102];
	st.shared.u8 	[_ZZN12EventProgramI6collazE4execEjE16should_make_work], %rs18;

BB1_23:
	and.b16  	%rs13, %rs18, 255;
	setp.eq.s16	%p15, %rs13, 0;
	@%p15 bra 	BB1_37;
	bra.uni 	BB1_16;

BB1_37:
	bar.sync 	0;
	add.u64 	%rd110, %SPL, 104;
	add.u64 	%rd108, %SPL, 56;
	add.u64 	%rd105, %SP, 56;
	add.u64 	%rd104, %SP, 104;
	st.local.u64 	[%rd108], %rd35;
	st.local.u64 	[%rd108+8], %rd46;
	st.local.u64 	[%rd108+16], %rd42;
	st.local.u64 	[%rd108+24], %rd44;
	st.local.u64 	[%rd108+32], %rd47;
	st.local.u64 	[%rd108+40], %rd48;
	mov.u32 	%r102, 0;
	st.local.u32 	[%rd110], %r102;
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd104;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd105;
	.param .b32 retval0;
	call.uni (retval0), 
	_finalize, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r103, [retval0+0];
	
	//{
	}// Callseq End 4
	membar.gl;
	bar.sync 	0;
	setp.ne.s32	%p25, %r2, 0;
	@%p25 bra 	BB1_40;

	ld.u64 	%rd97, [%rd35];
	atom.add.u32 	%r104, [%rd97], 1;
	mov.u32 	%r105, %nctaid.x;
	add.s32 	%r106, %r105, -1;
	setp.ne.s32	%p26, %r104, %r106;
	@%p26 bra 	BB1_40;

	ld.u64 	%rd98, [%rd35];
	atom.exch.b32 	%r107, [%rd98], 0;
	ld.u64 	%rd99, [%rd35+16];
	ld.u8 	%rs14, [%rd99];
	setp.eq.s16	%p27, %rs14, 0;
	selp.u16	%rs15, 1, 0, %p27;
	st.u8 	[%rd99], %rs15;
	ld.u32 	%r108, [%rd99+24];
	ld.u32 	%r109, [%rd99+36];
	st.u32 	[%rd99+28], %r102;
	min.u32 	%r111, %r109, %r108;
	st.v2.u32 	[%rd99+32], {%r111, %r102};
	st.u32 	[%rd99+40], %r108;
	ld.u64 	%rd100, [%rd35+24];
	ld.u8 	%rs16, [%rd100];
	setp.eq.s16	%p28, %rs16, 0;
	selp.u16	%rs17, 1, 0, %p28;
	st.u8 	[%rd100], %rs17;
	ld.u32 	%r112, [%rd100+24];
	ld.u32 	%r113, [%rd100+36];
	st.u32 	[%rd100+28], %r102;
	min.u32 	%r114, %r113, %r112;
	st.v2.u32 	[%rd100+32], {%r114, %r102};
	st.u32 	[%rd100+40], %r112;

BB1_40:
	st.param.b32	[func_retval0+0], %r102;
	ret;
}

	// .globl	dispatch_odd_async
.visible .func  (.param .b32 func_retval0) dispatch_odd_async(
	.param .b64 dispatch_odd_async_param_0,
	.param .b64 dispatch_odd_async_param_1,
	.param .b64 dispatch_odd_async_param_2
)
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<22>;


	ld.param.u64 	%rd4, [dispatch_odd_async_param_1];
	ld.param.u64 	%rd13, [dispatch_odd_async_param_2];
	ld.u64 	%rd1, [%rd13];
	ld.u64 	%rd2, [%rd13+8];
	ld.u64 	%rd3, [%rd13+16];
	ld.u64 	%rd14, [%rd4];
	ld.u64 	%rd15, [%rd14+16];
	add.s64 	%rd5, %rd15, 36;
	ld.u32 	%r1, [%rd15+40];
	ld.u32 	%r2, [%rd15+36];
	mov.pred 	%p7, -1;
	mov.u64 	%rd20, 0;
	setp.ge.u32	%p4, %r2, %r1;
	@%p4 bra 	BB2_2;

	atom.add.u32 	%r3, [%rd5], 1;
	ld.u32 	%r4, [%rd5+4];
	setp.lt.u32	%p5, %r3, %r4;
	cvt.u64.u32	%rd16, %r3;
	selp.b64	%rd20, %rd16, 0, %p5;
	setp.ge.u32	%p7, %r3, %r4;

BB2_2:
	@%p7 bra 	BB2_7;

	ld.u64 	%rd17, [%rd4];
	ld.u64 	%rd8, [%rd17+16];
	ld.u8 	%rs1, [%rd8];
	setp.eq.s16	%p6, %rs1, 0;
	@%p6 bra 	BB2_5;

	ld.u64 	%rd21, [%rd8+8];
	bra.uni 	BB2_6;

BB2_5:
	ld.u64 	%rd21, [%rd8+16];

BB2_6:
	mul.lo.s64 	%rd18, %rd20, 40;
	add.s64 	%rd19, %rd21, %rd18;
	st.u64 	[%rd19+8], %rd1;
	st.u64 	[%rd19+16], %rd2;
	st.u64 	[%rd19+24], %rd3;

BB2_7:
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	dispatch_odd_sync
.visible .func  (.param .b32 func_retval0) dispatch_odd_sync(
	.param .b64 dispatch_odd_sync_param_0,
	.param .b64 dispatch_odd_sync_param_1,
	.param .b64 dispatch_odd_sync_param_2
)
{
	.local .align 8 .b8 	__local_depot3[80];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<18>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [dispatch_odd_sync_param_1];
	ld.param.u64 	%rd2, [dispatch_odd_sync_param_2];
	add.u64 	%rd3, %SP, 0;
	add.u64 	%rd4, %SPL, 0;
	add.u64 	%rd5, %SP, 48;
	add.u64 	%rd6, %SPL, 48;
	add.u64 	%rd7, %SP, 72;
	add.u64 	%rd8, %SPL, 72;
	ld.u64 	%rd9, [%rd2];
	ld.u64 	%rd10, [%rd2+8];
	ld.u64 	%rd11, [%rd2+16];
	ld.u64 	%rd12, [%rd1];
	ld.u64 	%rd13, [%rd1+8];
	ld.u64 	%rd14, [%rd1+16];
	ld.u64 	%rd15, [%rd1+24];
	ld.u64 	%rd16, [%rd1+32];
	ld.u64 	%rd17, [%rd1+40];
	st.local.u64 	[%rd4], %rd12;
	st.local.u64 	[%rd4+8], %rd13;
	st.local.u64 	[%rd4+16], %rd14;
	st.local.u64 	[%rd4+24], %rd15;
	st.local.u64 	[%rd4+32], %rd16;
	st.local.u64 	[%rd4+40], %rd17;
	st.local.u64 	[%rd6], %rd9;
	st.local.u64 	[%rd6+8], %rd10;
	st.local.u64 	[%rd6+16], %rd11;
	mov.u32 	%r1, 0;
	st.local.u32 	[%rd8], %r1;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	_odd, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b32	%r2, [retval0+0];
	
	//{
	}// Callseq End 5
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	dispatch_even_async
.visible .func  (.param .b32 func_retval0) dispatch_even_async(
	.param .b64 dispatch_even_async_param_0,
	.param .b64 dispatch_even_async_param_1,
	.param .b64 dispatch_even_async_param_2
)
{
	.reg .pred 	%p<8>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<22>;


	ld.param.u64 	%rd4, [dispatch_even_async_param_1];
	ld.param.u64 	%rd13, [dispatch_even_async_param_2];
	ld.u64 	%rd1, [%rd13];
	ld.u64 	%rd2, [%rd13+8];
	ld.u64 	%rd3, [%rd13+16];
	ld.u64 	%rd14, [%rd4];
	ld.u64 	%rd15, [%rd14+24];
	add.s64 	%rd5, %rd15, 36;
	ld.u32 	%r1, [%rd15+40];
	ld.u32 	%r2, [%rd15+36];
	mov.pred 	%p7, -1;
	mov.u64 	%rd20, 0;
	setp.ge.u32	%p4, %r2, %r1;
	@%p4 bra 	BB4_2;

	atom.add.u32 	%r3, [%rd5], 1;
	ld.u32 	%r4, [%rd5+4];
	setp.lt.u32	%p5, %r3, %r4;
	cvt.u64.u32	%rd16, %r3;
	selp.b64	%rd20, %rd16, 0, %p5;
	setp.ge.u32	%p7, %r3, %r4;

BB4_2:
	@%p7 bra 	BB4_7;

	ld.u64 	%rd17, [%rd4];
	ld.u64 	%rd8, [%rd17+24];
	ld.u8 	%rs1, [%rd8];
	setp.eq.s16	%p6, %rs1, 0;
	@%p6 bra 	BB4_5;

	ld.u64 	%rd21, [%rd8+8];
	bra.uni 	BB4_6;

BB4_5:
	ld.u64 	%rd21, [%rd8+16];

BB4_6:
	mul.lo.s64 	%rd18, %rd20, 40;
	add.s64 	%rd19, %rd21, %rd18;
	st.u64 	[%rd19+8], %rd1;
	st.u64 	[%rd19+16], %rd2;
	st.u64 	[%rd19+24], %rd3;

BB4_7:
	mov.u32 	%r5, 0;
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	dispatch_even_sync
.visible .func  (.param .b32 func_retval0) dispatch_even_sync(
	.param .b64 dispatch_even_sync_param_0,
	.param .b64 dispatch_even_sync_param_1,
	.param .b64 dispatch_even_sync_param_2
)
{
	.local .align 8 .b8 	__local_depot5[80];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<18>;


	mov.u64 	%SPL, __local_depot5;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [dispatch_even_sync_param_1];
	ld.param.u64 	%rd2, [dispatch_even_sync_param_2];
	add.u64 	%rd3, %SP, 0;
	add.u64 	%rd4, %SPL, 0;
	add.u64 	%rd5, %SP, 48;
	add.u64 	%rd6, %SPL, 48;
	add.u64 	%rd7, %SP, 72;
	add.u64 	%rd8, %SPL, 72;
	ld.u64 	%rd9, [%rd2];
	ld.u64 	%rd10, [%rd2+8];
	ld.u64 	%rd11, [%rd2+16];
	ld.u64 	%rd12, [%rd1];
	ld.u64 	%rd13, [%rd1+8];
	ld.u64 	%rd14, [%rd1+16];
	ld.u64 	%rd15, [%rd1+24];
	ld.u64 	%rd16, [%rd1+32];
	ld.u64 	%rd17, [%rd1+40];
	st.local.u64 	[%rd4], %rd12;
	st.local.u64 	[%rd4+8], %rd13;
	st.local.u64 	[%rd4+16], %rd14;
	st.local.u64 	[%rd4+24], %rd15;
	st.local.u64 	[%rd4+32], %rd16;
	st.local.u64 	[%rd4+40], %rd17;
	st.local.u64 	[%rd6], %rd9;
	st.local.u64 	[%rd6+8], %rd10;
	st.local.u64 	[%rd6+16], %rd11;
	mov.u32 	%r1, 0;
	st.local.u32 	[%rd8], %r1;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd7;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd3;
	.param .b64 param2;
	st.param.b64	[param2+0], %rd5;
	.param .b32 retval0;
	call.uni (retval0), 
	_even, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b32	%r2, [retval0+0];
	
	//{
	}// Callseq End 6
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	access_device
.visible .func  (.param .b32 func_retval0) access_device(
	.param .b64 access_device_param_0,
	.param .b64 access_device_param_1
)
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [access_device_param_0];
	ld.param.u64 	%rd2, [access_device_param_1];
	ld.u64 	%rd3, [%rd2+24];
	ld.u64 	%rd4, [%rd3];
	st.u64 	[%rd1], %rd4;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	access_group
.visible .func  (.param .b32 func_retval0) access_group(
	.param .b64 access_group_param_0,
	.param .b64 access_group_param_1
)
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [access_group_param_0];
	ld.param.u64 	%rd2, [access_group_param_1];
	ld.u64 	%rd3, [%rd2+32];
	ld.u64 	%rd4, [%rd3];
	st.u64 	[%rd1], %rd4;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	access_thread
.visible .func  (.param .b32 func_retval0) access_thread(
	.param .b64 access_thread_param_0,
	.param .b64 access_thread_param_1
)
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [access_thread_param_0];
	ld.param.u64 	%rd2, [access_thread_param_1];
	ld.u64 	%rd3, [%rd2+40];
	ld.u64 	%rd4, [%rd3];
	st.u64 	[%rd1], %rd4;
	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_ZN4util14current_leaderEv
.visible .func  (.param .b32 func_retval0) _ZN4util14current_leaderEv(

)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<9>;


	// inline asm
	activemask.b32 %r1;
	// inline asm
	neg.s32 	%r2, %r1;
	and.b32  	%r3, %r1, %r2;
	clz.b32 	%r4, %r3;
	mov.u32 	%r5, 31;
	sub.s32 	%r6, %r5, %r4;
	mov.u32 	%r7, %tid.x;
	setp.eq.s32	%p1, %r6, %r7;
	selp.u32	%r8, 1, 0, %p1;
	st.param.b32	[func_retval0+0], %r8;
	ret;
}

	// .globl	_ZN4util13warp_inc_scanEv
.visible .func  (.param .b32 func_retval0) _ZN4util13warp_inc_scanEv(

)
{
	.reg .b32 	%r<8>;


	// inline asm
	activemask.b32 %r1;
	// inline asm
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, 1;
	shl.b32 	%r4, %r3, %r2;
	add.s32 	%r5, %r4, -1;
	and.b32  	%r6, %r5, %r1;
	popc.b32 	%r7, %r6;
	st.param.b32	[func_retval0+0], %r7;
	ret;
}

	// .globl	_ZN4util12active_countEv
.visible .func  (.param .b32 func_retval0) _ZN4util12active_countEv(

)
{
	.reg .b32 	%r<3>;


	// inline asm
	activemask.b32 %r1;
	// inline asm
	popc.b32 	%r2, %r1;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

	// .globl	_ZN4util9pop_countEj
.visible .func  (.param .b32 func_retval0) _ZN4util9pop_countEj(
	.param .b32 _ZN4util9pop_countEj_param_0
)
{
	.reg .b32 	%r<3>;


	ld.param.u32 	%r1, [_ZN4util9pop_countEj_param_0];
	popc.b32 	%r2, %r1;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

	// .globl	_ZN4util9pop_countEy
.visible .func  (.param .b64 func_retval0) _ZN4util9pop_countEy(
	.param .b64 _ZN4util9pop_countEy_param_0
)
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_ZN4util9pop_countEy_param_0];
	popc.b64 	%r1, %rd1;
	cvt.s64.s32	%rd2, %r1;
	st.param.b64	[func_retval0+0], %rd2;
	ret;
}

	// .globl	_ZN4util13leading_zerosEj
.visible .func  (.param .b32 func_retval0) _ZN4util13leading_zerosEj(
	.param .b32 _ZN4util13leading_zerosEj_param_0
)
{
	.reg .b32 	%r<3>;


	ld.param.u32 	%r1, [_ZN4util13leading_zerosEj_param_0];
	clz.b32 	%r2, %r1;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

	// .globl	_ZN4util13leading_zerosEy
.visible .func  (.param .b64 func_retval0) _ZN4util13leading_zerosEy(
	.param .b64 _ZN4util13leading_zerosEy_param_0
)
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_ZN4util13leading_zerosEy_param_0];
	clz.b64 	%r1, %rd1;
	cvt.s64.s32	%rd2, %r1;
	st.param.b64	[func_retval0+0], %rd2;
	ret;
}

	// .globl	_ZN4util11random_uintERj
.visible .func  (.param .b32 func_retval0) _ZN4util11random_uintERj(
	.param .b64 _ZN4util11random_uintERj_param_0
)
{
	.reg .b32 	%r<3>;
	.reg .b64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN4util11random_uintERj_param_0];
	ld.u32 	%r1, [%rd1];
	mad.lo.s32 	%r2, %r1, 69069, 1;
	st.u32 	[%rd1], %r2;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

	// .globl	_ZN4util11random_uintERy
.visible .func  (.param .b64 func_retval0) _ZN4util11random_uintERy(
	.param .b64 _ZN4util11random_uintERy_param_0
)
{
	.reg .b64 	%rd<5>;


	ld.param.u64 	%rd1, [_ZN4util11random_uintERy_param_0];
	ld.u64 	%rd2, [%rd1];
	mul.lo.s64 	%rd3, %rd2, 2971215073;
	add.s64 	%rd4, %rd3, 12345;
	st.u64 	[%rd1], %rd4;
	st.param.b64	[func_retval0+0], %rd4;
	ret;
}


